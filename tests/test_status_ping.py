# ğŸ“„ Script: test_status_ping.py
# ğŸ”§ Zweck: TestfÃ¤lle fÃ¼r die Anwendung
# ğŸ—‚ Pfad: tests/test_status_ping.py
# ğŸ‘¤ Autor: MINT-RESEARCH
# ğŸ“… Erstellt: 2025-04-13
# ğŸ§± BenÃ¶tigte Pakete: json
# ğŸ§ª Testbar: âœ…
# HINWEIS (MCP): Dieser Test Ã¼berprÃ¼ft die Struktur der Status-Datei des MCP-Systems.
# HINWEIS (MCP): Er stellt sicher, dass die Datei korrekt formatiert ist und die
# HINWEIS (MCP): erforderlichen Informationen Ã¼ber die MCP-Einheiten enthÃ¤lt.
# HINWEIS (MCP): Dies ist ein wichtiger Test fÃ¼r die Ãœberwachung und Diagnose
# HINWEIS (MCP): des Systemzustands im MCP-Framework.

import json
import pytest
import os

def test_status_structure():
    # Get the directory of this file
    test_dir = os.path.dirname(os.path.abspath(__file__))
    # Go up one level to the project root
    project_root = os.path.dirname(test_dir)
    # Construct the path to the status file
    status_path = os.path.join(project_root, "runtime_state", "state_status.json")
    
    with open(status_path) as f:
        status = json.load(f)
        assert "units" in status
        assert isinstance(status["units"], dict)

# HINWEIS (MCP): HinzugefÃ¼gt fÃ¼r direkte AusfÃ¼hrbarkeit des Tests
# HINWEIS (MCP): Verwendet absolute Pfade, um von jedem Verzeichnis aus ausfÃ¼hrbar zu sein
if __name__ == "__main__":
    pytest.main(["-v", __file__])